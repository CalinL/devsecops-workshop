name: OneDOS/OSS_pygoat-devsecops
on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  DEFECTDOJO_PRODUCTID: 2
  DEFECTDOJO_URL: https://defectdojo-002.cad4devops.com:8443/api/v2
  DOCKER_HUB_USER: devopsshield
  appUrl: http://pygoat-test.cad4devops.com
  containerName: owaspzapproxy
  containerRegistry: OSS_dockerhub_devops_shield
  doActiveScan: false
  dockerWaitTime: 30s
  host: pygoat-test.cad4devops.com
  image: devopsshield/devsecops-pygoat
  kubernetesServiceConnection: OSS_Microk8s
  loopWaitTime: 10s
  maxAlerts: 5000
  owaspImageName: softwaresecurityproject/zap-stable
  owaspZapApiPort: 8090
  owaspZapWebPort: 8080
  owaspzap-report-json: owasp-zap.json
  owaspzap-report-sarif: owasp-zap.sarif
  sarifTemplate: sarif-json
  tag: "${{ github.run_id }}"
  traditionalJsonTemplate: traditional-json
jobs:
  build-build_and_push_app:
    name: Build and Push App
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY}}
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME}}
    environment:
      name: dev
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.8"
          architecture: x64
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Check some variables
        run: |-
          echo "DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY}}, DOCKER_USERNAME: ${{ env.DOCKER_USERNAME}}"
          echo "DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}"
      # Unable to determine registry '$(containerRegistry)' type. The service connection was not found or the authentication type not supported.
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          registry: "${{ env.DOCKER_REGISTRY }}"
          username: "${{ env.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"
      # Unable to determine registry '$(containerRegistry)' type. The service connection was not found or the authentication type not supported.
      - name: Build and Push Docker image
        run: docker build . --file "Dockerfile" -t ${{ env.image }}:${{ github.run_id }} -t ${{ env.image }}:latest
      # Unable to determine registry '$(containerRegistry)' type. The service connection was not found or the authentication type not supported.
      - name: Build and Push Docker image
        run: docker push ${{ env.image }}:${{ github.run_id }}
      - name: Build and Push Docker image
        run: docker push ${{ env.image }}:latest
  test-run_devopsshield_scan:
    name: Run DevOps Shield Scan
    needs:
      - build-build_and_push_app
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY}}
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME}}
    environment:
      name: dev
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
  #     # This item has no matching transformer
  #     - task: DevOpsShield-SecurityScanner@1
  test-run_sca_analysis:
    name: Run SCA Analysis
    needs:
      - build-build_and_push_app
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: Safety Dependency Check
        run: |-
          pip install safety
          mkdir -p ${{ runner.workspace }}/dependency-check-reports
          safety check -r requirements.txt --continue-on-error --output json > ${{ runner.workspace }}/dependency-check-reports/dependency-check-report-safety-check.json
      - name: Pip Audit Dependency Check
        run: |-
          pip install pip-audit
          mkdir -p ${{ runner.workspace }}/dependency-check-reports
          # suppress the error code to continue the pipeline even if there are vulnerabilities
          pip-audit -r requirements.txt --format json --output ${{ runner.workspace }}/dependency-check-reports/dependency-check-report-pip-audit.json || true
          #cat ${{ runner.workspace }}/dependency-check-reports/dependency-check-report-pip-audit.json
      - uses: actions/upload-artifact@v4.1.0
        with:
          name: dependency-check-reports
          path: "${{ runner.workspace }}/dependency-check-reports"
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          registry: "${{ env.DOCKER_REGISTRY }}"
          username: "${{ env.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"
      - name: Image Scanning
        run: |-
          # Install the Docker Scout CLI
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          # Login to Docker Hub required for Docker Scout CLI
          #docker login -u ${{ vars.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected
          docker scout cves ${{ env.image }}:${{ env.tag }} --only-severity critical,high --format sarif --output ${{ runner.workspace }}/image-scan-report.json
      - name: Publish Image Scan Report
        if: success() || failure()
        uses: actions/upload-artifact@v4.1.0
        with:
          name: image-scan-report
          path: "${{ runner.workspace }}/image-scan-report.json"
  test-run_unit_tests:
    name: Run Unit Tests
    needs:
      - build-build_and_push_app
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.8"
          architecture: x64
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: UnitTests with PyTest
        run: |-
          python -m pip install pytest-azurepipelines pytest-cov
          python -m pytest introduction/tests/unit/ --junitxml=${{ runner.workspace }}/TEST-output.xml --cov=. --cov-report=xml
      - name: Publish UnitTest Report
        if: success() || failure()
        uses: actions/upload-artifact@v4.1.0
        with:
          name: unit-test-results
          path: "${{ runner.workspace }}/TEST-output.xml"
  test-run_sast_analysis:
    name: Run SAST Analysis
    needs:
      - build-build_and_push_app
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: Bandit Scan
        run: |-
          pip3 install --upgrade pip
          pip3 install --upgrade setuptools
          pip3 install bandit
          bandit -ll -ii -r ./introduction -f json -o ${{ runner.workspace }}/sast-report.json --exit-zero
      - name: Publish SAST Scan Report
        if: success() || failure()
        uses: actions/upload-artifact@v4.1.0
        with:
          name: bandit-sast-report
          path: "${{ runner.workspace }}/sast-report.json"
  test-upload_reports:
    name: Upload Reports
    needs:
      - test-run_devopsshield_scan
      - test-run_sast_analysis
      - test-run_unit_tests
      - test-run_sca_analysis
      - build-build_and_push_app
    runs-on: ubuntu-latest
    env:
      DEFECTDOJO_ANCHORE_DISABLE: "false"
      DEFECTDOJO_ENGAGEMENT_API_TEST: "true"
      DEFECTDOJO_ENGAGEMENT_BUILD_SERVER: "null"
      DEFECTDOJO_ENGAGEMENT_CHECK_LIST: "true"
      DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT: "true"
      DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE: "null"
      DEFECTDOJO_ENGAGEMENT_PEN_TEST: "true"
      DEFECTDOJO_ENGAGEMENT_PERIOD: 7
      DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER: "null"
      DEFECTDOJO_ENGAGEMENT_STATUS: Not Started
      DEFECTDOJO_ENGAGEMENT_THREAT_MODEL: "true"
      DEFECTDOJO_NOT_ON_MASTER: "false"
      DEFECTDOJO_SCAN_ACTIVE: "true"
      DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS: "true"
      DEFECTDOJO_SCAN_ENVIRONMENT: Default
      DEFECTDOJO_SCAN_MINIMUM_SEVERITY: Info
      DEFECTDOJO_SCAN_PUSH_TO_JIRA: "false"
      DEFECTDOJO_SCAN_TEST_TYPE: SAST and SCA Scan
      DEFECTDOJO_SCAN_VERIFIED: "true"
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: Download Reports From Pipeline Artifacts
        uses: actions/download-artifact@v4.1.0
        with:
          path: "${{ runner.workspace }}"
      - name: Create DevOps Shield Reports Directory
        run: mkdir -p "${{ runner.workspace }}/devops-shield-reports"
      - name: Fix DOS SARIF (temporary workaround)
        run: |-
          Write-Host "Fixing DOS Sarif"
          # read sarif and fix it
          $SarifFile = "${{ runner.workspace }}/CodeAnalysisLogs/DevOpsShield-SecurityScanner-Report.sarif"
          $SarifFileFixed = "${{ runner.workspace }}/devops-shield-reports/DevOpsShield-SecurityScanner-Report-Fixed.sarif"
          $sarifObject = Get-Content -Path $SarifFile | ConvertFrom-Json -Depth 100
          foreach ($run in $sarifObject.runs) {
              foreach ($result in $run.results) {
                  # echo ruleId
                  Write-Host $result.ruleId
                  # loop through fixes
                  foreach ($fix in $result.fixes) {
                      # echo fix
                      Write-Host $fix
                      # echo fix description
                      $description = $fix.description
                      # echo description id
                      $descriptionId = $description.id
                      Write-Host `t`t$descriptionId
                      # echo description arguments
                      $descriptionArguments = $description.arguments
                      foreach ($argument in $descriptionArguments) {
                          Write-Host `t`t`t$argument
                      }
                      # check if there are more than one argument
                      if ($descriptionArguments.Count -gt 1) {
                          # throw error
                          Write-Error "Error: More than one argument found"
                          exit 1
                      }
                      # prepare new description text
                      $newText = "$descriptionId - $($descriptionArguments[0])"
                      $fix.description = $newText
                      # echo new fix description
                      Write-Host `t`t$newText
                      # change description object
                      # create new custom object for description with a single text property
                      $newDescription = [PSCustomObject]@{ text = $newText }
                      # replace description object with new object
                      $fix.description = $newDescription
                  }
              }
          }
          $sarifObject | ConvertTo-Json -Depth 100 | Set-Content -Path $SarifFileFixed
        shell: pwsh
      - uses: actions/upload-artifact@v4.1.0
        with:
          name: devops-shield-reports
          path: "${{ runner.workspace }}/devops-shield-reports"
      - name: Create DefectDojo Engagement
        run: |-
          TODAY=`date +%Y-%m-%d`
          ENDDAY=$(date -d "+${{ env.DEFECTDOJO_ENGAGEMENT_PERIOD }} days" +%Y-%m-%d)
          ENGAGEMENTID=`curl --fail --location --request POST "${{ env.DEFECTDOJO_URL }}/engagements/" \
            --header "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
            --header 'Content-Type: application/json' \
              --data-raw "{
                \"tags\": [\"AZURE-DEVOPS\"],
                \"name\": \"pygoat-${{ env.System_DefinitionId }}\",
                \"description\": \"${{ env.Build_SourceVersionMessage }}\",
                \"version\": \"${{ github.ref }}\",
                \"first_contacted\": \"${TODAY}\",
                \"target_start\": \"${TODAY}\",
                \"target_end\": \"${ENDDAY}\",
                \"reason\": \"string\",
                \"tracker\": \"${{ github.server.url }}/${{ github.repository }}/\",
                \"threat_model\": \"${{ env.DEFECTDOJO_ENGAGEMENT_THREAT_MODEL }}\",
                \"api_test\": \"${{ env.DEFECTDOJO_ENGAGEMENT_API_TEST }}\",
                \"pen_test\": \"${{ env.DEFECTDOJO_ENGAGEMENT_PEN_TEST }}\",
                \"check_list\": \"${{ env.DEFECTDOJO_ENGAGEMENT_CHECK_LIST }}\",
                \"status\": \"${{ env.DEFECTDOJO_ENGAGEMENT_STATUS }}\",
                \"engagement_type\": \"CI/CD\",
                \"build_id\": \"${{ env.System_DefinitionId }}\",
                \"commit_hash\": \"${{ github.sha }}\",
                \"branch_tag\": \"${{ github.ref }}\",
                \"deduplication_on_engagement\": \"${{ env.DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT }}\",
                \"product\": \"${{ env.DEFECTDOJO_PRODUCTID }}\",
                \"source_code_management_uri\": \"${{ github.server.url }}/${{ github.repository }}\",
                \"build_server\": ${{ env.DEFECTDOJO_ENGAGEMENT_BUILD_SERVER }},
                \"source_code_management_server\": ${{ env.DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER }},
                \"orchestration_engine\": ${{ env.DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE }}
            }" | jq -r '.id'` &&
            echo ${ENGAGEMENTID} > ENGAGEMENTID.env
      - name: Upload Reports To DefectDojo
        run: |-
          TODAY=`date +%Y-%m-%d`
          ENGAGEMENTID=`cat ENGAGEMENTID.env`
          array=('type=("SARIF" "Dependency Check Scan" "pip-audit Scan" "SARIF" "Bandit Scan")' 'file=("devops-shield-reports/DevOpsShield-SecurityScanner-Report-Fixed.sarif" "dependency-check-reports/dependency-check-report-safety-check.json" "dependency-check-reports/dependency-check-report-pip-audit.json" "image-scan-report/image-scan-report.json" "bandit-sast-report/sast-report.json")')
          for elt in "${array[@]}";do eval $elt;done
          for scan in 0 1 2 3 4; do \
            echo ""
            echo "======================= Scan No $scan ======================="
            echo "Uploading ${type[$scan]} report"
            echo "Uploading ${file[$scan]}"
            #echo "Contents are:"
            #cat ${{ runner.workspace }}/${file[$scan]}
            curl --fail --location --request POST "${{ env.DEFECTDOJO_URL }}/import-scan/" \
              --header "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
              --form "scan_date=${TODAY}" \
              --form "minimum_severity=${{ env.DEFECTDOJO_SCAN_MINIMUM_SEVERITY }}" \
              --form "active=${{ env.DEFECTDOJO_SCAN_ACTIVE }}" \
              --form "verified=${{ env.DEFECTDOJO_SCAN_VERIFIED }}" \
              --form "scan_type=${type[$scan]}" \
              --form "engagement=${ENGAGEMENTID}" \
              --form "file=@${{ runner.workspace }}/${file[$scan]}" \
              --form "close_old_findings=${{ env.DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS }}" \
              --form "push_to_jira=${{ env.DEFECTDOJO_SCAN_PUSH_TO_JIRA }}" \
              --form "test_type=${{ env.DEFECTDOJO_SCAN_TEST_TYPE }}" \
              --form "environment=${{ env.DEFECTDOJO_SCAN_ENVIRONMENT }}"
          done
  deploy_test-deploy_to_test_k8s_cluster:
    name: Deploy To Test K8S Cluster
    needs:
      - test-run_devopsshield_scan
      - test-run_sca_analysis
      - test-run_unit_tests
      - test-run_sast_analysis
      - test-upload_reports
    runs-on: ubuntu-latest
    environment:
      name: OSS_pygoat-test
    if: github.RUN_NUMBER == 1
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: download artifact
        uses: actions/download-artifact@v4.1.0
      #     # This artifact references an artifact who's service connection is in:
      #     # Ensure the workflow exists in GitHub and uploads an artifact for this action to use.
      #     - uses: dawidd6/action-download-artifact@v3.0.0
      #       with:
      #         name: none
      #         github_token: "${{ secrets.GITHUB_TOKEN }}"
      #         repo: "${{ github.repository }}"
      - uses: actions/checkout@v4.1.0
      #     # This item has no matching transformer
      #     - task: replacetokens@5
      #       inputs:
      #         targetFiles: "${{ github.workspace }}/manifests/k8s-*.yaml"
      #         encoding: auto
      #         tokenPattern: azpipelines
      #         writeBOM: true
      #         actionOnMissing: fail
      #         keepToken: false
      #         actionOnNoFiles: continue
      #         enableTransforms: false
      #         enableRecursion: false
      #         useLegacyPattern: false
      #         enableTelemetry: true
      #       displayName: Replace K8S Image Tag
      #     # This item has no matching transformer
      #     - task: KubernetesManifest@1
      #       inputs:
      #         action: deploy
      #         connectionType: kubernetesServiceConnection
      #         kubernetesServiceConnection: OSS_Microk8s
      #         namespace: pygoat-test
      #         manifests: manifests/k8s-*.yaml
      #       displayName: Deploy Manifests
      - name: Sleep For 30 Seconds
        run: sleep 30
  dast-run_integration_tests:
    name: Run Integration Tests
    needs:
      - deploy_test-deploy_to_test_k8s_cluster
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: Integration Tests with Selenium
        if: success() || failure()
        run: |-
          python -m pip install -r requirements.txt
          python -m pip install pytest-cov
          python -m pytest introduction/tests/integration/ --junitxml=${{ runner.workspace }}/selenium-test-output.xml --cov=. --cov-report=xml
      - name: Publish Selenium Report
        if: success() || failure()
        uses: actions/upload-artifact@v4.1.0
        with:
          name: selenium-test-results
          path: "${{ runner.workspace }}/selenium-test-output.xml"
  dast-run_dast_scan:
    name: Run DAST Scan
    needs:
      - deploy_test-deploy_to_test_k8s_cluster
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      #     # This item has no matching transformer
      #     - task: owaspzap@1
      #       enabled: false
      #       inputs:
      #         scantype: targetedScan
      #         url: "${{ env.appUrl }}"
      #       displayName: OWASP ZAP Scan
      - name: load owasp detached
        run: "docker run --name ${{ env.containerName }} -d -u zap \\\n  -p ${{ env.owaspZapWebPort }}:${{ env.owaspZapWebPort }} \\\n  -p ${{ env.owaspZapApiPort }}:${{ env.owaspZapApiPort }} \\\n  -i ${{ env.owaspImageName }} zap.sh -daemon \\\n  -port ${{ env.owaspZapApiPort }} -host 0.0.0.0 \\\n  -config api.disablekey=true \\\n  -config api.addrs.addr.name=.* \\\n  -config api.addrs.addr.regex=true\n\n# wait for docker to load\necho \"waiting for docker to load for ${{ env.dockerWaitTime }}\"\nsleep ${{ env.dockerWaitTime }}\n\n# wait for zap to start\necho \"waiting for zap to start with loop time ${{ env.loopWaitTime }}\"\necho \"\"\nwhile [ \"$(curl -s http://localhost:${{ env.owaspZapApiPort }}/JSON/core/view/version/ | jq -r '.version')\" == \"null\" ]; do\n  echo \"\"\n  echo \"waiting for zap to start with loop time ${{ env.loopWaitTime }}\"\n  sleep ${{ env.loopWaitTime }}\n  curl -s http://localhost:${{ env.owaspZapApiPort }}/JSON/core/view/version/ | jq -r '.version'\ndone\n\n# check zap version\necho \"\"\ncurl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/core/view/version/\"\n\n# To start the spider scan\necho \"\"\ncurl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/spider/action/scan/?url=${{ env.appUrl }}\"\n\n# loop until response is 100\necho \"\"\nwhile [ \"$(curl -s http://localhost:${{ env.owaspZapApiPort }}/JSON/spider/view/status/?scanId=0 | jq -r '.status')\" != \"100\" ]; do\n  echo \"\"\n  echo \"waiting for spider to finish with loop time ${{ env.loopWaitTime }}\"\n  sleep ${{ env.loopWaitTime }}\n  curl -s http://localhost:${{ env.owaspZapApiPort }}/JSON/spider/view/status/?scanId=0 | jq -r '.status'\ndone\n\n# To view the status of spider\necho \"\"\ncurl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/spider/view/status/?scanId=0\"\n\n# To start the the active scan if doActiveScan is true\nif [ \"${{ env.doActiveScan }}\" == \"true\" ]; then\n  echo \"\"\n  echo \"starting active scan\"\n  curl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/ascan/action/scan/?url=${{ env.appUrl }}&recurse=true&inScopeOnly=&scanPolicyName=&method=&postData=&contextId=\"\n  \n  # To view the the status of active scan\n  echo \"\"\n  curl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/ascan/view/status/?scanId=0\"\n\n  # loop until response is 100\n  echo \"\"\n  while [ \"$(curl -s http://localhost:${{ env.owaspZapApiPort }}/JSON/ascan/view/status/?scanId=0 | jq -r '.status')\" != \"100\" ]; do\n    echo \"\"\n    echo \"waiting for active scan to finish with loop time ${{ env.loopWaitTime }}\"\n    sleep ${{ env.loopWaitTime }}\n    curl -s http://localhost:${{ env.owaspZapApiPort }}/JSON/ascan/view/status/?scanId=0 | jq -r '.status'\n  done\n\n  # To view the alerts of active scan\n  echo \"\"\n  curl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/ascan/view/status/?scanId=0\"\n\n  # To view the alerts of active scan\n  echo \"\"\n  echo \"viewing ${{ env.maxAlerts }} alerts\"\n  curl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/core/view/alerts/?baseurl=${{ env.appUrl }}&start=0&count=${{ env.maxAlerts }}\"\nfi\n\necho \"\"\necho \"generating JSON report $(owaspzap-report-json)\"\n#curl \"http://localhost:${{ env.owaspZapApiPort }}/OTHER/core/other/jsonreport/\"\ncurl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/reports/action/generate/?template=${{ env.traditionalJsonTemplate }}&title=repoTitle&reportFileName=$(owaspzap-report-json)\"\necho \"\"\necho \"contents of $(owaspzap-report-json)\"\ndocker exec ${{ env.containerName }} cat /home/zap/$(owaspzap-report-json)\necho \"\"\necho \"generating SARIF report $(owaspzap-report-sarif).json\"\ncurl \"http://localhost:${{ env.owaspZapApiPort }}/JSON/reports/action/generate/?template=${{ env.sarifTemplate }}&title=repoTitle&reportFileName=$(owaspzap-report-sarif).json\"\necho \"\"\necho \"create folder for owaspzap reports\"\nmkdir -p \"${{ runner.temp }}/owaspzap\"\necho \"\"\necho \"contents of $(owaspzap-report-sarif).json\"\ndocker exec ${{ env.containerName }} cat /home/zap/$(owaspzap-report-sarif).json\necho \"\"\necho \"copying $(owaspzap-report-sarif-json) to artifact directory\"\ndocker cp \"${{ env.containerName }}:/home/zap/$(owaspzap-report-json)\" \"${{ runner.temp }}/owaspzap/$(owaspzap-report-json)\"\necho \"\"\necho \"copying $(owaspzap-report-sarif).json to artifact directory\"\ndocker cp \"${{ env.containerName }}:/home/zap/$(owaspzap-report-sarif).json\" \"${{ runner.temp }}/owaspzap/$(owaspzap-report-sarif)\""
      - name: Publish OWASP ZAP Reports
        uses: actions/upload-artifact@v4.1.0
        with:
          name: CodeAnalysisLogs
          path: "${{ runner.temp }}/owaspzap"
      - name: Publish ZAP Report
        if: success() || failure()
        uses: actions/upload-artifact@v4.1.0
        with:
          name: owasp_zap_report
          path: "${{ runner.temp }}/owaspzap"
  deploy_prod-deploy_prod:
    name: Deploy To Prod K8S Cluster
    needs:
      - dast-run_integration_tests
      - dast-run_dast_scan
    runs-on: ubuntu-latest
    environment:
      name: OSS_pygoat-prod
    env:
      appUrl: http://pygoat.cad4devops.com
      host: pygoat.cad4devops.com
    if: github.RUN_NUMBER == 1
    steps:
      - name: checkout
        uses: actions/checkout@v4.1.0
      - name: download artifact
        uses: actions/download-artifact@v4.1.0
      #     # This artifact references an artifact who's service connection is in:
      #     # Ensure the workflow exists in GitHub and uploads an artifact for this action to use.
      #     - uses: dawidd6/action-download-artifact@v3.0.0
      #       with:
      #         name: none
      #         github_token: "${{ secrets.GITHUB_TOKEN }}"
      #         repo: "${{ github.repository }}"
      - uses: actions/checkout@v4.1.0
#     # This item has no matching transformer
#     - task: replacetokens@5
#       inputs:
#         targetFiles: "${{ github.workspace }}/manifests/k8s-*.yaml"
#         encoding: auto
#         tokenPattern: azpipelines
#         writeBOM: true
#         actionOnMissing: fail
#         keepToken: false
#         actionOnNoFiles: continue
#         enableTransforms: false
#         enableRecursion: false
#         useLegacyPattern: false
#         enableTelemetry: true
#       displayName: Replace K8S Image Tag
#     # This item has no matching transformer
#     - task: KubernetesManifest@1
#       inputs:
#         action: deploy
#         connectionType: kubernetesServiceConnection
#         kubernetesServiceConnection: "${{ env.kubernetesServiceConnection }}"
#         namespace: pygoat
#         manifests: manifests/k8s-*.yaml
#       displayName: Deploy Manifests
