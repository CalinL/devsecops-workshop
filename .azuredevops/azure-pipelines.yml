# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: OSS_devsecops_pygoat_secrets
  - name: tag
    value: "$(Build.BuildId)"
  #- name: image
  #  value: "devsecops001/pygoat"
  - name: image
    value: "devopsshield/devsecops-pygoat"
  - name: containerRegistry
    value: OSS_dockerhub_devops_shield
  - name: kubernetesServiceConnection
    value: "OSS_Microk8s"
  - name: DEFECTDOJO_URL
    value: "https://defectdojo-002.cad4devops.com:8443/api/v2"
  #- name: DEFECTDOJO_TOKEN
  #  value: "defectdojo_token"
  - name: DOCKER_HUB_USER
    value: "devopsshield"
  #- name: DOCKER_HUB_PAT
  #  value: "dckr_pat_bWb*************************"
  - name: appUrl
    value: "http://pygoat-test.cad4devops.com"
  - name: host
    value: "pygoat-test.cad4devops.com"
  # OWASP ZAP
  - name: owaspImageName
    value: "softwaresecurityproject/zap-stable" # "owasp/zap2docker-stable"
  - name: owaspzap-report-sarif
    value: "owasp-zap.sarif"
  - name: owaspzap-report-json
    value: "owasp-zap.json"
  - name: sarifTemplate
    value: "sarif-json"
  - name: traditionalJsonTemplate
    value: "traditional-json"
  - name: containerName
    value: owaspzapproxy
  - name: owaspZapWebPort
    value: 8080
  - name: owaspZapApiPort
    value: 8090
  - name: maxAlerts
    value: 5000
  - name: loopWaitTime
    value: 10s
  - name: dockerWaitTime
    value: 30s
  - name: doActiveScan
    value: true # set to true to run active scan (takes longer)

stages:
  - stage: build
    jobs:
      - job: build_and_push_app
        displayName: Build and Push App
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.8"
              addToPath: true
              architecture: "x64"
            displayName: "Setup Python"

          - script: |
              pip install -r requirements.txt
            displayName: "Install Dependencies"

          - task: Docker@2
            inputs:
              containerRegistry: "$(containerRegistry)"
              repository: "$(image)"
              command: "buildAndPush"
              Dockerfile: "**/Dockerfile"
            displayName: "Build and Push Docker image"

  - stage: test
    dependsOn: build
    jobs:
      - job: run_sca_analysis
        displayName: Run SCA Analysis
        steps:
          - task: CmdLine@2
            inputs:
              script: |
                pip install safety
                safety check -r requirements.txt --continue-on-error --output json > $(Pipeline.Workspace)/dependency-check-report.json
            displayName: "Safety Dependency Check"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Pipeline.Workspace)/dependency-check-report.json"
              artifact: "dependency-check-report"
              publishLocation: "pipeline"

          - task: CmdLine@2
            inputs:
              script: |
                # Install the Docker Scout CLI
                curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
                # Login to Docker Hub required for Docker Scout CLI
                docker login -u $(DOCKER_HUB_USER) -p $(DOCKER_HUB_PAT)
                # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected
                docker scout cves $(image):$(tag) --only-severity critical,high --format sarif --output $(Pipeline.Workspace)/image-scan-report.json
            displayName: Image Scanning

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Pipeline.Workspace)/image-scan-report.json"
              artifact: "image-scan-report"
              publishLocation: "pipeline"
            condition: succeededOrFailed()
            displayName: "Publish Image Scan Report"

      - job: run_unit_tests
        displayName: Run Unit Tests
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.8"
              addToPath: true
              architecture: "x64"
            displayName: "Setup Python"

          - script: |
              pip install -r requirements.txt
            displayName: "Install Dependencies"

          - script: |
              python -m pip install pytest-azurepipelines pytest-cov
              python -m pytest introduction/tests/unit/ --junitxml=$(Pipeline.Workspace)/TEST-output.xml --cov=. --cov-report=xml
            displayName: "UnitTests with PyTest"
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Pipeline.Workspace)/TEST-output.xml"
              artifact: "unit-test-results"
              publishLocation: "pipeline"
            condition: succeededOrFailed()
            displayName: "Publish UnitTest Report"

      - job: run_sast_analysis
        displayName: Run SAST Analysis
        steps:
          - task: CmdLine@2
            inputs:
              script: |
                pip3 install --upgrade pip
                pip3 install --upgrade setuptools
                pip3 install bandit
                bandit -ll -ii -r ./introduction -f json -o $(Pipeline.Workspace)/sast-report.json --exit-zero
            displayName: "Bandit Scan"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Pipeline.Workspace)/sast-report.json"
              artifact: "bandit-sast-report"
              publishLocation: "pipeline"
            condition: succeededOrFailed()
            displayName: "Publish SAST Scan Report"

      - job: upload_reports
        dependsOn:
          - run_sast_analysis
          - run_unit_tests
          - run_sca_analysis
        displayName: Upload Reports
        variables:
          DEFECTDOJO_ENGAGEMENT_PERIOD: 7
          DEFECTDOJO_ENGAGEMENT_STATUS: "Not Started"
          DEFECTDOJO_ENGAGEMENT_BUILD_SERVER: "null"
          DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER: "null"
          DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE: "null"
          DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT: "false"
          DEFECTDOJO_ENGAGEMENT_THREAT_MODEL: "true"
          DEFECTDOJO_ENGAGEMENT_API_TEST: "true"
          DEFECTDOJO_ENGAGEMENT_PEN_TEST: "true"
          DEFECTDOJO_ENGAGEMENT_CHECK_LIST: "true"
          DEFECTDOJO_NOT_ON_MASTER: "false"
          DEFECTDOJO_PRODUCTID: 1
          DEFECTDOJO_SCAN_MINIMUM_SEVERITY: "Info"
          DEFECTDOJO_SCAN_ACTIVE: "true"
          DEFECTDOJO_SCAN_VERIFIED: "true"
          DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS: "true"
          DEFECTDOJO_SCAN_PUSH_TO_JIRA: "false"
          DEFECTDOJO_SCAN_ENVIRONMENT: "Default"
          DEFECTDOJO_ANCHORE_DISABLE: "false"
          DEFECTDOJO_SCAN_TEST_TYPE: "SAST and SCA Scan"
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              itemPattern: "**"
              targetPath: "$(Pipeline.Workspace)"
            displayName: "Download Reports From Pipeline Artifacts"

          - task: CmdLine@2
            inputs:
              script: |
                TODAY=`date +%Y-%m-%d`
                ENDDAY=$(date -d "+$(DEFECTDOJO_ENGAGEMENT_PERIOD) days" +%Y-%m-%d)
                ENGAGEMENTID=`curl --fail --location --request POST "$(DEFECTDOJO_URL)/engagements/" \
                  --header "Authorization: Token $(DEFECTDOJO_TOKEN)" \
                  --header 'Content-Type: application/json' \
                    --data-raw "{
                      \"tags\": [\"AZURE-DEVOPS\"],
                      \"name\": \"pygoat-$(System.DefinitionId)\",
                      \"description\": \"$(Build.SourceVersionMessage)\",
                      \"version\": \"$(Build.SourceBranch)\",
                      \"first_contacted\": \"${TODAY}\",
                      \"target_start\": \"${TODAY}\",
                      \"target_end\": \"${ENDDAY}\",
                      \"reason\": \"string\",
                      \"tracker\": \"$(Build.Repository.Uri)/\",
                      \"threat_model\": \"$(DEFECTDOJO_ENGAGEMENT_THREAT_MODEL)\",
                      \"api_test\": \"$(DEFECTDOJO_ENGAGEMENT_API_TEST)\",
                      \"pen_test\": \"$(DEFECTDOJO_ENGAGEMENT_PEN_TEST)\",
                      \"check_list\": \"$(DEFECTDOJO_ENGAGEMENT_CHECK_LIST)\",
                      \"status\": \"$(DEFECTDOJO_ENGAGEMENT_STATUS)\",
                      \"engagement_type\": \"CI/CD\",
                      \"build_id\": \"$(System.DefinitionId)\",
                      \"commit_hash\": \"$(Build.SourceVersion)\",
                      \"branch_tag\": \"$(Build.SourceBranch)\",
                      \"deduplication_on_engagement\": \"$(DEFECTDOJO_ENGAGEMENT_DEDUPLICATION_ON_ENGAGEMENT)\",
                      \"product\": \"$(DEFECTDOJO_PRODUCTID)\",
                      \"source_code_management_uri\": \"$(Build.Repository.Uri)\",
                      \"build_server\": $(DEFECTDOJO_ENGAGEMENT_BUILD_SERVER),
                      \"source_code_management_server\": $(DEFECTDOJO_ENGAGEMENT_SOURCE_CODE_MANAGEMENT_SERVER),
                      \"orchestration_engine\": $(DEFECTDOJO_ENGAGEMENT_ORCHESTRATION_ENGINE)
                  }" | jq -r '.id'` &&
                  echo ${ENGAGEMENTID} > ENGAGEMENTID.env
            displayName: "Create DefectDojo Engagement"

          - task: CmdLine@2
            inputs:
              script: |
                TODAY=`date +%Y-%m-%d`
                ENGAGEMENTID=`cat ENGAGEMENTID.env`
                array=('type=("Dependency Check Scan" "SARIF" "Bandit Scan")' 'file=("dependency-check-report/dependency-check-report.json" "image-scan-report/image-scan-report.json" "bandit-sast-report/sast-report.json")')
                for elt in "${array[@]}";do eval $elt;done
                for scan in 0 1 2; do \
                  curl --fail --location --request POST "$(DEFECTDOJO_URL)/import-scan/" \
                    --header "Authorization: Token $(DEFECTDOJO_TOKEN)" \
                    --form "scan_date=${TODAY}" \
                    --form "minimum_severity=$(DEFECTDOJO_SCAN_MINIMUM_SEVERITY)" \
                    --form "active=$(DEFECTDOJO_SCAN_ACTIVE)" \
                    --form "verified=$(DEFECTDOJO_SCAN_VERIFIED)" \
                    --form "scan_type=${type[$scan]}" \
                    --form "engagement=${ENGAGEMENTID}" \
                    --form "file=@$(Pipeline.Workspace)/${file[$scan]}" \
                    --form "close_old_findings=$(DEFECTDOJO_SCAN_CLOSE_OLD_FINDINGS)" \
                    --form "push_to_jira=$(DEFECTDOJO_SCAN_PUSH_TO_JIRA)" \
                    --form "test_type=$(DEFECTDOJO_SCAN_TEST_TYPE)" \
                    --form "environment=$(DEFECTDOJO_SCAN_ENVIRONMENT)"
                done
            displayName: "Upload Reports To DefectDojo"

  # for this you need to create a test environment in azure pipelines and add approvers
  - stage: deploy_test
    dependsOn: test
    jobs:
      - deployment: deploy_to_test_k8s_cluster
        displayName: Deploy To Test K8S Cluster
        environment: "OSS_pygoat-test"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - checkout: self
                - task: replacetokens@5
                  inputs:
                    targetFiles: "$(System.DefaultWorkingDirectory)/k8s-*.yaml"
                    encoding: "auto"
                    tokenPattern: "azpipelines"
                    writeBOM: true
                    actionOnMissing: "fail"
                    keepToken: false
                    actionOnNoFiles: "continue"
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true
                  displayName: "Replace K8S Image Tag"

                - task: KubernetesManifest@1
                  inputs:
                    action: "deploy"
                    connectionType: "kubernetesServiceConnection"
                    kubernetesServiceConnection: "OSS_Microk8s"
                    namespace: "pygoat-test"
                    manifests: "k8s-*.yaml"
                  displayName: "Deploy Manifests"

                - task: CmdLine@2
                  inputs:
                    script: "sleep 30"
                  displayName: "Sleep For 30 Seconds"

  - stage: dast
    dependsOn: deploy_test
    jobs:
      - job: run_integration_tests
        displayName: Run Integration Tests
        steps:
          # for containerised apps you can run the DAST and Integration tests against a container running inside the pipeline itself (instead of deploying to an external url)
          # - task: CmdLine@2
          #   inputs:
          #     script: 'docker run -d -p 8000:8000 $(image):$(tag)'
          #   displayName: 'Run Container Inside Pipeline'

          - script: |
              python -m pip install -r requirements.txt
              python -m pip install pytest-cov
              python -m pytest introduction/tests/integration/ --junitxml=$(Pipeline.Workspace)/selenium-test-output.xml --cov=. --cov-report=xml
            condition: succeededOrFailed()
            displayName: "Integration Tests with Selenium"
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Pipeline.Workspace)/selenium-test-output.xml"
              artifact: "selenium-test-results"
              publishLocation: "pipeline"
            condition: succeededOrFailed()
            displayName: "Publish Selenium Report"

      - job: run_dast_scan
        displayName: Run DAST Scan
        steps:
          - task: owaspzap@1
            enabled: false # no longer works as of April 11, 2024
            inputs:
              scantype: "targetedScan"
              url: "$(appUrl)"
            displayName: "OWASP ZAP Scan"

          - script: |
              docker run --name $(containerName) -d -u zap \
                -p $(owaspZapWebPort):$(owaspZapWebPort) \
                -p $(owaspZapApiPort):$(owaspZapApiPort) \
                -i $(owaspImageName) zap.sh -daemon \
                -port $(owaspZapApiPort) -host 0.0.0.0 \
                -config api.disablekey=true \
                -config api.addrs.addr.name=.* \
                -config api.addrs.addr.regex=true

              # wait for docker to load
              echo "waiting for docker to load for $(dockerWaitTime)"
              sleep $(dockerWaitTime)

              # wait for zap to start
              echo "waiting for zap to start with loop time $(loopWaitTime)"
              echo ""
              while [ "$(curl -s http://localhost:$(owaspZapApiPort)/JSON/core/view/version/ | jq -r '.version')" == "null" ]; do
                echo ""
                echo "waiting for zap to start with loop time $(loopWaitTime)"
                sleep $(loopWaitTime)
                curl -s http://localhost:$(owaspZapApiPort)/JSON/core/view/version/ | jq -r '.version'
              done

              # check zap version
              echo ""
              curl "http://localhost:$(owaspZapApiPort)/JSON/core/view/version/"

              # To start the spider scan
              echo ""
              curl "http://localhost:$(owaspZapApiPort)/JSON/spider/action/scan/?url=$(appUrl)"

              # loop until response is 100
              echo ""
              while [ "$(curl -s http://localhost:$(owaspZapApiPort)/JSON/spider/view/status/?scanId=0 | jq -r '.status')" != "100" ]; do
                echo ""
                echo "waiting for spider to finish with loop time $(loopWaitTime)"
                sleep $(loopWaitTime)
                curl -s http://localhost:$(owaspZapApiPort)/JSON/spider/view/status/?scanId=0 | jq -r '.status'
              done

              # To view the status of spider
              echo ""
              curl "http://localhost:$(owaspZapApiPort)/JSON/spider/view/status/?scanId=0"

              # To start the the active scan if doActiveScan is true
              if [ "$(doActiveScan)" == "true" ]; then
                echo ""
                echo "starting active scan"
                curl "http://localhost:$(owaspZapApiPort)/JSON/ascan/action/scan/?url=$(appUrl)&recurse=true&inScopeOnly=&scanPolicyName=&method=&postData=&contextId="
                
                # To view the the status of active scan
                echo ""
                curl "http://localhost:$(owaspZapApiPort)/JSON/ascan/view/status/?scanId=0"

                # loop until response is 100
                echo ""
                while [ "$(curl -s http://localhost:$(owaspZapApiPort)/JSON/ascan/view/status/?scanId=0 | jq -r '.status')" != "100" ]; do
                  echo ""
                  echo "waiting for active scan to finish with loop time $(loopWaitTime)"
                  sleep $(loopWaitTime)
                  curl -s http://localhost:$(owaspZapApiPort)/JSON/ascan/view/status/?scanId=0 | jq -r '.status'
                done

                # To view the alerts of active scan
                echo ""
                curl "http://localhost:$(owaspZapApiPort)/JSON/ascan/view/status/?scanId=0"

                # To view the alerts of active scan
                echo ""
                echo "viewing $(maxAlerts) alerts"
                curl "http://localhost:$(owaspZapApiPort)/JSON/core/view/alerts/?baseurl=$(appUrl)&start=0&count=$(maxAlerts)"
              fi

              echo ""
              echo "generating JSON report $(owaspzap-report-json)"
              #curl "http://localhost:$(owaspZapApiPort)/OTHER/core/other/jsonreport/"
              curl "http://localhost:$(owaspZapApiPort)/JSON/reports/action/generate/?template=$(traditionalJsonTemplate)&title=repoTitle&reportFileName=$(owaspzap-report-json)"
              echo ""
              echo "contents of $(owaspzap-report-json)"
              docker exec $(containerName) cat /home/zap/$(owaspzap-report-json)
              echo ""
              echo "generating SARIF report $(owaspzap-report-sarif).json"
              curl "http://localhost:$(owaspZapApiPort)/JSON/reports/action/generate/?template=$(sarifTemplate)&title=repoTitle&reportFileName=$(owaspzap-report-sarif).json"
              echo ""
              echo "create folder for owaspzap reports"
              mkdir -p "$(Build.ArtifactStagingDirectory)/owaspzap"
              echo ""
              echo "contents of $(owaspzap-report-sarif).json"
              docker exec $(containerName) cat /home/zap/$(owaspzap-report-sarif).json
              echo ""
              echo "copying $(owaspzap-report-sarif-json) to artifact directory"
              docker cp "$(containerName):/home/zap/$(owaspzap-report-json)" "$(Build.ArtifactStagingDirectory)/owaspzap/$(owaspzap-report-json)"
              echo ""
              echo "copying $(owaspzap-report-sarif).json to artifact directory"
              docker cp "$(containerName):/home/zap/$(owaspzap-report-sarif).json" "$(Build.ArtifactStagingDirectory)/owaspzap/$(owaspzap-report-sarif)"
            displayName: load owasp detached
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/owaspzap"
              ArtifactName: "CodeAnalysisLogs"
              publishLocation: "Container"
            displayName: "Publish OWASP ZAP Reports"
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/owaspzap"
              artifact: "owasp_zap_report"
              publishLocation: "pipeline"
            displayName: "Publish ZAP Report"

  # for this you need to create a production environment in azure pipelines and add approvers
  - stage: deploy_prod
    dependsOn: dast
    variables:
      - name: appUrl
        value: "http://pygoat.cad4devops.com"
      - name: host
        value: "pygoat.cad4devops.com"
    jobs:
      - deployment: deploy_prod
        displayName: Deploy To Prod K8S Cluster
        environment: "OSS_pygoat-prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - checkout: self
                - task: replacetokens@5
                  inputs:
                    targetFiles: "$(System.DefaultWorkingDirectory)/k8s-*.yaml"
                    encoding: "auto"
                    tokenPattern: "azpipelines"
                    writeBOM: true
                    actionOnMissing: "fail"
                    keepToken: false
                    actionOnNoFiles: "continue"
                    enableTransforms: false
                    enableRecursion: false
                    useLegacyPattern: false
                    enableTelemetry: true
                  displayName: "Replace K8S Image Tag"
                - task: KubernetesManifest@1
                  inputs:
                    action: "deploy"
                    connectionType: "kubernetesServiceConnection"
                    kubernetesServiceConnection: $(kubernetesServiceConnection)
                    namespace: "pygoat-prod"
                    manifests: "k8s-*.yaml"
                  displayName: "Deploy Manifests"
